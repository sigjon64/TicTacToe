

apply plugin: 'java'
apply plugin: 'application'
apply plugin: "jacoco"

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}

jacoco {
    toolVersion = "0.7.1.201405082137"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

test {
    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpFile = file("$buildDir/jacoco/classpathdumps")
    }
}

jacoco {
    applyTo run
}

task applicationCodeCoverageReport(type:JacocoReport){
    executionData run
    sourceSets sourceSets.main
}


repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

sourceSets {
    selenium
    seleniumXvfb
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.5'
    testCompile 'junit:junit:4.11'
    compile fileTree(dir: 'lib', include: ['*.jar'])
    compile 'com.google.code.gson:gson:2.3'

    //compile 'net.joningi:icndb-java-api:1.0'
    compile 'com.sparkjava:spark-core:1.1.1'

    seleniumCompile 'junit:junit:4.11'
    seleniumCompile 'org.seleniumhq.selenium:selenium-java:2.39.0'

    seleniumXvfbCompile 'junit:junit:4.11'
    seleniumXvfbCompile 'org.seleniumhq.selenium:selenium-java:2.39.0'
}

task selenium(type: Test, dependsOn: installApp) {
    testClassesDir = sourceSets.selenium.output.classesDir
    classpath = sourceSets.selenium.runtimeClasspath

    ant.condition(property: "os", value: "windows") { os(family: "windows") }
    ant.condition(property: "os", value: "unix"   ) { os(family: "unix")    }

    doFirst {
        switch(ant.properties.os) {
            case 'unix':
                'build/install/TicTacToe/bin/TicTacToe &'.execute()
                break
            case 'windows':
                'build\\install\\TicTacToe\\bin\\TicTacToe.bat'.execute()
                break
        }
    }
}

task seleniumXvfb(type: Test, dependsOn: installApp) {
    testClassesDir = sourceSets.selenium.output.classesDir
    classpath = sourceSets.selenium.runtimeClasspath

    environment "DISPLAY", ":99"

    doFirst {
        'bin/xvfb start'.execute()
        'build/install/TicTacToe/bin/TicTacToe &'.execute()
    }
    
    doLast {
        'bin/xvfb stop'.execute()
    }
}

jar {
    manifest {
        attributes("Main-Class": "is.fantastic7.tictactoe.TicTacToe")
    }
}


applicationDefaultJvmArgs = ["-Dgreeting.language=en"]

task createDocs {
    def docs = file("$buildDir/docs")
    outputs.dir docs
    doLast {
        docs.mkdirs()
        new File(docs, "readme.txt").write("Read me!")
    }
}

mainClassName = "is.fantastic7.tictactoe.TicTacToe"

run {
    standardInput = System.in
}
 
task stage {
    dependsOn installApp
} 

test {
    testLogging {
    exceptionFormat = 'full'
    }
}
